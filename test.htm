<html>
<head>
<link rel="stylesheet" href="node_modules/qunitjs/qunit/qunit.css">
</head>
<body>
<div id="qunit" />
<div id="qunit-fixture" />
<script src="node_modules/qunitjs/qunit/qunit.js"></script>
<script src="js.js"></script>
<script>
"use strict"
var Cards, Targeting, targetingMode, targetingModeCb, game, player1, player2, players;
function setWinner(play){
	game.winner = play;
}
function initTest(){
	game = mkGame();
	game.player1.mark = game.player2.mark = Entropy;
	player1 = game.player1;
	player2 = game.player2;
	players = game.players;
}
loadcards(function(cards, targeting) {
	Cards = cards;
	Targeting = targeting;
	test("Adrenaline", function() {
		initTest();
		(player1.creatures[0] = new Creature(Cards.Devourer, player1)).adrenaline = 1;
		(player1.creatures[1] = new Creature(Cards.HornedFrog, player1)).adrenaline = 1;
		(player1.creatures[2] = new Creature(Cards.RubyDragon, player1)).adrenaline = 1;
		player2.quanta[Life]=3;
		player1.endturn();
		equal(player2.hp, 68, "dmg");
		equal(player1.quanta[Darkness], 2, "Absorbed");
		equal(player2.quanta[Life], 1, "Lone Life");
	});
	test("Deckout", function() {
		initTest();
		player1.endturn();
		equal(game.winner, player1);
	});
	test("Destroy", function() {
		initTest();
		player1.quanta[Death] = 10;
		player1.hand = [Cards.AmethystPillar, Cards.AmethystPillar, Cards.SoulCatcher, Cards.Shield, Cards.Dagger];
		while(player1.hand.length){
			player1.summon(0);
		}
		equal(player1.permanents[0].charges, 2, "2 charges");
		Actives.destroy.call(player2, player1.permanents[0]);
		equal(player1.permanents[0].charges, 1, "1 charge");
		Actives.destroy.call(player2, player1.permanents[0]);
		ok(!player1.permanents[0], "poof");
		equal(player1.permanents[1].card, Cards.SoulCatcher, "SoulCatcher");
		Actives.destroy.call(player2, player1.permanents[1]);
		ok(!player1.permanents[1], "SoulCatcher gone");
		equal(player1.shield.card, Cards.Shield, "Shield");
		Actives.destroy.call(player2, player1.shield);
		ok(!player1.shield, "Shield gone");
		equal(player1.weapon.card, Cards.Dagger, "Dagger");
		Actives.destroy.call(player2, player1.weapon);
		ok(!player1.weapon, "Dagger gone");
		player1.hand = [Cards.BoneWall];
		player1.summon(0);
		equal(player1.shield.charges, 7, "7 bones");
		Actives.destroy.call(player2, player1.shield);
		equal(player1.shield.charges, 6, "6 bones");
		for(var i=0; i<6; i++){
			Actives.destroy.call(player2, player1.shield);
		}
		ok(!player1.shield, "This town is all in hell");
	});
	test("Devourer", function() {
		initTest();
		var devourer = new Creature(Cards.Devourer, player1);
		player1.creatures[0] = devourer;
		player2.quanta[Light] = 1;
		player1.endturn();
		equal(player2.quanta[Light], 0, "Light");
		equal(player1.quanta[Darkness], 1, "Darkness");
	});
	test("Earthquake", function() {
		initTest();
		player1.hand = [Cards.AmethystPillar, Cards.AmethystPillar, Cards.AmethystPillar, Cards.AmethystPillar, Cards.AmethystPillar, Cards.AmethystPillar, Cards.AmethystPillar, Cards.AmethystPillar];
		for(var i=0; i<5; i++){
			player1.summon(0);
		}
		equal(player1.hand.length, 3, "handlength");
		var pillars = player1.permanents[0];
		ok(pillars instanceof Pillar, "ispillar");
		equal(pillars.charges, 5, "5 charges");
		Actives.earthquake.call(player2, pillars);
		equal(pillars.charges, 2, "2 charges");
		Actives.earthquake.call(player2, pillars);
		ok(!player1.permanents[0], "poof");
	});
	test("Hope", function() {
		initTest();
		player1.shield = new Shield(Cards.Hope, player1);
		for(var i=0; i<3; i++){
			player1.creatures[i] = new Creature(Cards.RayofLight, player1);
		}
		player1.endturn();
		equal(player1.shield.truedr(), 3, "DR");
		equal(player1.quanta[Light], 3, "RoL");
	});
	test("Obsession", function() {
		initTest();
		player1.hand = [Cards.GhostofthePast, Cards.GhostofthePast, Cards.GhostofthePast, Cards.GhostofthePast, Cards.GhostofthePast, Cards.GhostofthePast, Cards.GhostofthePast, Cards.GhostofthePast];
		player1.endturn(0);
		equal(player1.hp, 90, "Damage");
		equal(player1.hand.length, 7, "Discarded");
	});
	test("Parallel", function() {
		initTest();
		var damsel = new Creature(Cards.Damselfly, player1);
		player1.creatures[0] = damsel;
		Actives.parallel.call(player1, damsel);
		equal(player1.creatures[1].card, Cards.Damselfly, "PU'd");
		Actives.web.call(player1, damsel);
		ok(!damsel.passives.airborne && player1.creatures[1].passives.airborne, "Web'd");
	});
	test("Reflect", function() {
		initTest();
		Actives.lightning.call(player1, player2);
		ok(player1.hp == 100 && player2.hp == 95, "Plain spell");
		player2.shield = new Shield(Cards.MirrorShield, player2);
		Actives.lightning.call(player1, player2);
		ok(player1.hp == 95 && player2.hp == 95, "Reflected spell");
		player1.shield = new Shield(Cards.MirrorShield, player1);
		Actives.lightning.call(player1, player2);
		ok(player1.hp == 90 && player2.hp == 95, "Unreflected reflected spell");
	});
	test("Steal", function() {
		initTest();
		(player1.shield = new Shield(Cards.BoneWall, player1)).charges=3;
		Actives.steal.call(player2, player1.shield);
		ok(player1.shield && player1.shield.charges == 2, "Wish bones");
		ok(player2.shield && player2.shield.charges == 1, "stole 1");
		Actives.steal.call(player2, player1.shield);
		ok(player1.shield && player1.shield.charges == 1, "Lone bone");
		ok(player2.shield && player2.shield.charges == 2, "stole 2");
		Actives.steal.call(player2, player1.shield);
		ok(!player1.shield, "This town is all in hell");
		ok(player2.shield && player2.shield.charges == 3, "stole 3");
	});
	test("Voodoo", function() {
		initTest();
		var voodoo = new Creature(Cards.VoodooDoll, player1);
		player1.creatures[0] = voodoo;
		Actives.lightning.call(player1, voodoo);
		Actives.infect.call(player1, voodoo);
		equal(voodoo.hp, 11, "dmg");
		equal(player2.hp, 95, "foe dmg");
		equal(voodoo.poison, 1, "psn");
		equal(player2.poison, 1, "foe psn");
		Actives.holylight.call(player1, voodoo);
		equal(voodoo.hp, 1, "holy dmg");
		equal(player2.hp, 85, "foe holy dmg");
	});
});
</script>
</body>
</html>