<html>
<head>
	<title>openEtG</title>
	<style>
		body {
			background-color: #000000;
		}
	</style>
	<script src="pixi.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script src="etg.js"></script>
</head>
<body>
	<script>
	"use strict"
	var Cards, Targeting, targetingMode, targetingModeCb, myturn, player1, player2, players, id, foeId;
	loadcards(function(cards, targeting) {
		Cards = cards;
		Targeting = targeting;
		console.log("Cards loaded");
	});
	var m_w = 0, m_z = 987654321;
	function seed(i) {
		m_w = i;
	}
	function random()
	{
		var mask = 0xffffffff;
		m_z = (36969 * (m_z & 65535) + (m_z >> 16)) & mask;
		m_w = (18000 * (m_w & 65535) + (m_w >> 16)) & mask;
		var result = ((m_z << 16) + m_w) & mask;
		result /= 4294967296;
		return result + 0.5;
	}
	function shuffle(array) {
		var counter = array.length, temp, index;
		while (counter--) {
			index = (random() * counter) | 0;
			temp = array[counter];
			array[counter] = array[index];
			array[index] = temp;
		}
		return array;
	}
	function getTarget(active, cb){
		var tmode = Targeting[active];
		if (tmode == undefined){
			cb()
		}else{
			targetingMode = tmode;
			targetingModeCb = cb;
		}
	}
	function maybeSetText(textobject, text){
		if (textobject.text != text)textobject.setText(text);
	}
	var renderer = PIXI.autoDetectRenderer(900, 600);
	document.body.appendChild(renderer.view);
	var menuui = new PIXI.Stage(0x336699, true);
	var gameui = new PIXI.Stage(0x336699, true);
	var mainStage = menuui;

	var nopic = PIXI.Texture.fromImage("bunny.png");
	var cimgcache = {};
	function getCardImage(code){
		if (code in cimgcache)return cimgcache[code];
		else{
			var loader = new PIXI.AssetLoader(["cards/"+code+".png"]);
			loader.onComplete = function() { cimgcache[code]=new PIXI.Texture.fromImage("cards/"+code+".png"); }
			loader.load();
			return nopic;
		}
	}
	var deck = ['4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4vc', '4ve', '4ve', '4ve', '4ve', '4ve', '4vf', '4vf', '4vf', '4vf', '4vf'];

	var bpvp = new PIXI.Sprite(nopic);
	bpvp.position.x = 200;
	bpvp.position.y = 200;
	bpvp.setInteractive(true);
	bpvp.click = function(x) {
		if (id != null && Cards != null){
			//DEBUG
			var deckimport = document.getElementById("deckimport").value;
			if (deckimport)deck = deckimport.split(" ");
			socket.emit("pvpwant", {id: id, deck: deck});
		}
	}
	menuui.addChild(bpvp);
	var endturn = new PIXI.Sprite(nopic);
	endturn.position.x = 800;
	endturn.position.y = 500;
	endturn.setInteractive(true);
	endturn.click = function (x) {
		if (myturn){
			socket.emit("endturn", {foeId: foeId});
			player1.endturn();
			myturn = false;
		}
	}
	gameui.addChild(endturn);
	var handsprite = new Array(8);
	for (var i=0; i<8; i++){
		handsprite[i] = new PIXI.Sprite(nopic);
		handsprite[i].position.x=800;
		handsprite[i].position.y=200+20*i;
		handsprite[i].setInteractive(true);
		handsprite[i].click = function (x){
			if (!myturn || player1.silence)return;
			var index = handsprite.indexOf(this);
			var card = player1.hand[index];
			if (card && (card.cost == 0 || player1.spend(card.costele, card.cost))){
				if (card.type != SpellEnum){
					socket.emit("summon", {foeId: foeId, bits:6|index<<3});
					player1.summon(card);
					player1.hand.splice(index,1);
				}else{
					console.log("Targeting");
					getTarget(card.active, function (tgt) {
						console.log("Targeted");
						var bits=index<<3, idx;
						if (tgt == undefined){
							bits|=6;
						}else if (tgt == player1){
							bits|=0;
						}else if (tgt == player2){
							bits|=1;
						}else if ((idx=player1.creatures.indexOf(tgt)) != -1){
							bits|=2|idx<<6;
						}else if ((idx=player2.creatures.indexOf(tgt)) != -1){
							bits|=3|idx<<6;
						}else if ((idx=player1.permanents.indexOf(tgt)) != -1){
							bits|=4|idx<<6;
						}else if ((idx=player2.permanents.indexOf(tgt)) != -1){
							bits|=5|idx<<6;
						}
						socket.emit("summon", {foeId: foeId, bits:bits});
						summon(card, player1, tgt);
						player1.hand.splice(index,1);
					});
				}
			}
		}
		gameui.addChild(handsprite[i]);
	}
	var foehandsprite = new Array(8);
	for (var i=0; i<8; i++){
		foehandsprite[i] = new PIXI.Sprite(nopic);
		foehandsprite[i].position.x=20;
		foehandsprite[i].position.y=40+20*i;
		gameui.addChild(foehandsprite[i]);
	}
	var creasprite = new Array(23);
	for (var i=0; i<23; i++){
		creasprite[i] = new PIXI.Sprite(nopic);
		creasprite[i].position.x=100+(i%12)*30;
		creasprite[i].position.y=370+(i%3)*20+(Math.floor(i/12)*30);
		creasprite[i].setInteractive(true);
		creasprite[i].click = function (x){
			var index = creasprite.indexOf(this);
			if (targetingMode == CreatureEnum || targetingMode == 6){
				targetingMode = -1;
				targetingModeCb(player1.creatures[index]);
			}
		}
		gameui.addChild(creasprite[i]);
	}
	var foecreasprite = new Array(23);
	for (var i=0; i<23; i++){
		foecreasprite[i] = new PIXI.Sprite(nopic);
		foecreasprite[i].position.x=100+(i%12)*30;
		foecreasprite[i].position.y=30+(i%3)*20+(Math.floor(i/12)*30);
		foecreasprite[i].setInteractive(true);
		foecreasprite[i].click = function (x){
			var index = foecreasprite.indexOf(this);
			if (targetingMode == Creature || targetingMode == 6){
				targetingMode = -1;
				targetingModeCb(player2.creatures[index]);
			}
		}
		gameui.addChild(foecreasprite[i]);
	}
	var permsprite = new Array(23);
	for (var i=0; i<23; i++){
		permsprite[i] = new PIXI.Sprite(nopic);
		permsprite[i].position.x=100+(i%12)*30;
		permsprite[i].position.y=500+(i%3)*20+(Math.floor(i/12)*30);
		permsprite[i].setInteractive(true);
		permsprite[i].click = function (x){
			var index = permsprite.indexOf(this);
			if (targetingMode <= PermanentEnum){
				targetingMode = -1;
				targetingModeCb(player1.permanents[index]);
			}
		}
		gameui.addChild(permsprite[i]);
	}
	var foepermsprite = new Array(23);
	for (var i=0; i<23; i++){
		foepermsprite[i] = new PIXI.Sprite(nopic);
		foepermsprite[i].position.x=100+(i%12)*30;
		foepermsprite[i].position.y=160+(i%3)*20+(Math.floor(i/12)*30);
		foepermsprite[i].setInteractive(true);
		foepermsprite[i].click = function (x){
			var index = permsprite.indexOf(this);
			if (targetingMode <= PermanentEnum){
				targetingMode = -1;
				targetingModeCb(player2.permanents[index]);
			}
		}
		gameui.addChild(foepermsprite[i]);
	}
	var quantatext = new PIXI.Text("", {font: "12px Arial bold"});
	quantatext.position.x=800;
	quantatext.position.y=40;
	gameui.addChild(quantatext);
	var foequantatext = new PIXI.Text("", {font: "12px Arial bold"});
	foequantatext.position.x=20;
	foequantatext.position.y=320;
	gameui.addChild(foequantatext);
	var hptext = new PIXI.Text("", {font: "12px Arial bold"});
	hptext.position.x=800;
	hptext.position.y=20;
	gameui.addChild(hptext);
	var foehptext = new PIXI.Text("", {font: "12px Arial bold"});
	foehptext.position.x=20;
	foehptext.position.y=300;
	gameui.addChild(foehptext);
	var socket = io.connect('http://localhost');
	socket.on("idgive", function(data) {
		id = data.id;
	});
	socket.on("pvpgive", function(data) {
		seed(data.seed);
		foeId = data.foeId;
		myturn = id == data.first;
		player1 = new Player();
		player2 = new Player();
		player1.foe = player2;
		player2.foe = player1;
		players = [player1, player2];
		var idx;
		if ((idx=TrueMarks.indexOf(deck[deck.length-1]))!=-1){
			delete deck[deck.length-1];
			player1.mark=idx;
		}
		if ((idx=TrueMarks.indexOf(data.deck[data.deck.length-1]))!=-1){
			delete data.deck[data.deck.length-1];
			player2.mark=idx;
		}
		if (myturn){
			player1.deck = shuffle(deck).slice(0);
			player2.deck = shuffle(data.deck);
		}else{
			player2.deck = shuffle(data.deck);
			player1.deck = shuffle(deck).slice(0);
		}
		for(var i=0;i<7;i++){
			player1.hand[i] = Cards[player1.deck.pop()];
			player2.hand[i] = Cards[player2.deck.pop()];
		}
		mainStage = gameui;
	});
	socket.on("endturn", function(data) {
		player2.endturn();
		myturn = true;
	});
	socket.on("summon", function(data) {
		var bits = data.bits, tgtop=bits&7, tgt;
		console.log("summon call: " + bits);
		if (tgtop == 0){
			tgt=player2;
		}else if(tgtop==1){
			tgt=player1;
		}else if (tgtop==2){
			tgt=player2.creatures[bits>>6];
		}else if (tgtop==3){
			tgt=player1.creatures[bits>>6];
		}else if (tgtop==4){
			tgt=player2.permanents[bits>>6];
		}else if (tgtop==5){
			tgt=player1.permanents[bits>>6];
		}else if (tgtop!=6)console.log("Unknown tgtop: "+tgtop);
		var handindex = bits>>3&7;
		var card = player2.hand[handindex];
		player2.spend(card.costele, card.cost);
		player2.summon(card, tgt);
		player2.hand.splice(handindex,1);
	});

	function animate() {
		if (mainStage == gameui){
			for(var i=0;i<8;i++){
				if (player1.hand[i]){
					handsprite[i].setTexture(getCardImage(player1.hand[i].code));
				}else handsprite[i].setTexture(nopic);
				if (player2.hand[i]){
					foehandsprite[i].setTexture(getCardImage("000"));
				}else foehandsprite[i].setTexture(nopic);
			}
			for(var i=0;i<23;i++){
				if (player1.creatures[i]){
					creasprite[i].setTexture(getCardImage(player1.creatures[i].card.code));
				}else creasprite[i].setTexture(nopic);
				if (player2.creatures[i]){
					foecreasprite[i].setTexture(getCardImage(player2.creatures[i].card.code));
				}else foecreasprite[i].setTexture(nopic);
			}
			for(var i=0;i<23;i++){
				if (player1.permanents[i]){
					permsprite[i].setTexture(getCardImage(player1.permanents[i].card.code));
				}else permsprite[i].setTexture(nopic);
				if (player2.permanents[i]){
					foepermsprite[i].setTexture(getCardImage(player2.permanents[i].card.code));
				}else foepermsprite[i].setTexture(nopic);
			}
			var qtext = "", foeqtext = "";
			for(var i=1; i<7; i++){
				qtext += player1.quanta[i] + "\t" + player1.quanta[i+6] + "\n";
				foeqtext += player2.quanta[i] + "\t" + player2.quanta[i+6] + "\n";
			}
			maybeSetText(quantatext, qtext);
			maybeSetText(foequantatext, foeqtext);
			maybeSetText(hptext, player1.hp + "/" + player1.maxhp);
			maybeSetText(foehptext, player2.hp + "/" + player2.maxhp);
		}
	    renderer.render(mainStage);
		requestAnimFrame(animate);
	}
	requestAnimFrame(animate);
	</script>
	<input id="deckimport" type="text" value="" />
</body>
</html>
